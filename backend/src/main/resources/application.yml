spring:
  rabbitmq:
#    connection-timeout: 1s     # 设置MQ的连接超时时间
#    template:
#        retry:
#          enabled: true     # 开启超时重试机制
#          initial-interval: 1000ms     # 失败后的初始等待时间
#          multiplier: 2     # 失败后下次的等待时长倍数（下次等待时长：initial-interval * multiplier）
#          max-attempts: 3     # 最大重试次数
#    publisher-confirm-type: correlated     # 开启publisher confirm机制，并设置confirm类型
#    publisher-returns: true     # 开启publisher return机制
    host: ${lcwyyds.rabbitmq.host}
    port: ${lcwyyds.rabbitmq.port}
    virtual-host: ${lcwyyds.rabbitmq.virtual-host}
    username: ${lcwyyds.rabbitmq.username}
    password: ${lcwyyds.rabbitmq.password}
    listener:
      simple:
        prefetch: 1
        retry:
          enabled: true #开启超时重试机制
          initial-interval: 1000ms #失败后的初始等待时间
          multiplier: 1 #失败后下次等待时长倍数，下次等待时长= Initial - interval * multiplier
          max-attempts: 3 #最大重试次数
          stateless: true #true无状态，false有状态，如果业务中包含事务，就改为fasle
  profiles:
    #运行的环境
    active: test
  application:
    name: lcwyyds
  datasource:
    url: jdbc:mysql://${lcwyyds.mysql.ip}:${lcwyyds.mysql.port}/${lcwyyds.mysql.db}?useUnicode=true&characterEncoding=UTF-8&serverTimezone=Asia/Shanghai
    username: ${lcwyyds.mysql.username}
    password: ${lcwyyds.mysql.password}
    driver-class-name: com.mysql.cj.jdbc.Driver
  redis:
    # Redis服务器地址
    host: ${lcwyyds.redis.host}
    # Redis服务器端口号
    port: ${lcwyyds.redis.port}
    # 使用的数据库索引，默认是0
    database: 1
    # 连接超时时间
    timeout: 1800000
#    # 设置密码
    password: ${lcwyyds.redis.password}
  jackson:
    serialization:
      write-dates-as-timestamps: true
  mvc:
    pathmatch:
      matching-strategy: ANT_PATH_MATCHER
  servlet:
    multipart:
      max-file-size: -1
      max-request-size: -1
jwt:
  secret: ${lcwyyds.jwt.secret}

server:
  port: 9100
  servlet:
    context-path: /api
  tomcat:
    max-connections: 10
    threads:
      max: 10
      min-spare: 10
    accept-count: 10

wx:
  mp:
    #    callback: http://f4cd-113-92-129-127.ngrok.io
    callback: ${lcwyyds.wx.callback}
    configs:
      - appId: ${lcwyyds.wx.appId} # 第一个公众号的appid
        secret: ${lcwyyds.wx.secret} # 公众号的appsecret
        token: ${lcwyyds.wx.token} # 接口配置里的Token值
        aesKey: ${lcwyyds.wx.aesKey} # 接口配置里的EncodingAESKey值

carbon:
  name: carbon
  version: 3.3.0
  copyrightYear: 2022
  demoEnabled: true
  profile: D:/
  addressEnabled: false
  captchaType: char
mybatis-plus:
#  configuration:
#    log-impl: org.apache.ibatis.logging.stdout.StdOutImpl
  mapper-locations: classpath:mapper/*.xml
  type-aliases-package: com.collect.backend.domain.entity

myfile:
  path: ${lcwyyds.file.path}

mybatis-plus-join:
  logic-del-type: on

minio:
  endpoint: http://localhost:9000
  accessKey: minioadmin
  secretKey: minioadmin
  bucketName: collect-url
  bucketNameSlice: slice-file
#  server.tomcat.max-connections=8192
#  server.tomcat.max-threads=200

